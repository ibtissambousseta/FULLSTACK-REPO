Responsabilité de chaque module

contactService.js : Ce module gère la logique métier des contacts. Il stocke les contacts et fournit des fonctions pour les ajouter (ajouterContacts) et les lister (listerContacts).

utils/format.js : Ce module s’occupe uniquement du formatage des contacts pour l’affichage. La fonction formatercontact transforme un objet contact en une chaîne lisible.

app.js : C’est le point d’entrée de l’application. Il utilise les modules précédents pour créer des contacts et les afficher en ligne de commande.


Pourquoi séparer le formatage, la logique et le point d’entrée ?

Séparer ces responsabilités permet de rendre le code plus clair et organisé :

La logique métier n’est pas mélangée à l’affichage.

Le formatage peut être modifié sans toucher à la gestion des contacts.

Le point d’entrée (app.js) se contente de coordonner les modules, ce qui rend le flux de l’application facile à suivre.


Comment cela facilite la maintenance à long terme ?

On peut modifier ou remplacer un module sans impacter les autres. Par exemple, changer le format des contacts ne touche pas à la logique d’ajout.

Les bugs sont plus faciles à isoler, car chaque module a une responsabilité claire et unique.

Le code devient réutilisable et testable, ce qui est essentiel pour les projets qui grandissent avec le temps.